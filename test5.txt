 1. Prevenção de Injeção de SQL:
Utilizar Prepared Statements e Parâmetros Parametrizados:


$stmt = $pdo->prepare("SELECT * FROM usuarios WHERE username = :username AND senha = :senha");
$stmt->bindParam(':username', $username);
$stmt->bindParam(':senha', $senha);
$stmt->execute();
Validação e Sanitização de Dados de Entrada:

$username = filter_input(INPUT_POST, 'username', FILTER_SANITIZE_STRING);
$senha = filter_input(INPUT_POST, 'senha', FILTER_SANITIZE_STRING);
2. Prevenção de Cross-Site Scripting (XSS):
Codificação de Saída (Output Encoding):


echo htmlspecialchars($user_input, ENT_QUOTES, 'UTF-8');
Usar CSP (Content Security Policy):
Adicione um cabeçalho CSP para limitar de onde os recursos podem ser carregados.


header("Content-Security-Policy: default-src 'self'");
3. Prevenção de Cross-Site Request Forgery (CSRF):
Token Anti-CSRF:
Inclua um token CSRF em formulários e verifique sua validade no servidor.


 Em algum lugar do seu formulário
<input type="hidden" name="csrf_token" value="<?php echo $_SESSION['csrf_token']; ?>">

 Verificação no lado do servidor
if ($_POST['csrf_token'] !== $_SESSION['csrf_token']) {
     Token inválido, possível ataque CSRF
    exit();
}
Origem e Referer Header:
Verifique a origem (Origin Header) ou o cabeçalho Referer para garantir que a solicitação venha do seu próprio domínio.